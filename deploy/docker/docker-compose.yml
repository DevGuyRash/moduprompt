x-app-env: &app-env
  NODE_ENV: production
  PORT: ${PORT:-8080}
  DATABASE_URL: ${DATABASE_URL:-postgresql://moduprompt:moduprompt@postgres:5432/moduprompt?schema=public}
  STORAGE_ENDPOINT: ${STORAGE_ENDPOINT:-http://minio:9000}
  STORAGE_ACCESS_KEY: ${STORAGE_ACCESS_KEY:-minioadmin}
  STORAGE_SECRET_KEY: ${STORAGE_SECRET_KEY:-minioadmin}
  STORAGE_BUCKET: ${STORAGE_BUCKET:-moduprompt-exports}
  EXPORT_QUEUE_URL: ${EXPORT_QUEUE_URL:-redis://redis:6379}
  EXPORT_CALLBACK_URL: ${EXPORT_CALLBACK_URL:-http://app:8080}
  LOG_LEVEL: ${LOG_LEVEL:-info}
  STATIC_ROOT: ${STATIC_ROOT:-/srv/moduprompt/apps/web/dist}

services:
  app:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
    image: moduprompt/app:local
    environment:
      <<: *app-env
    ports:
      - "${PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - app-cache:/srv/moduprompt/.cache
      - type: tmpfs
        target: /tmp
    read_only: true
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test:
        - CMD-SHELL
        - >
          node -e "const http=require('http');const opts={host:'127.0.0.1',port:process.env.PORT||8080,path:'/healthz',timeout:4000};const req=http.get(opts,res=>{process.exit(res.statusCode===200?0:1);});req.on('error',()=>process.exit(1));req.on('timeout',()=>{req.destroy();process.exit(1);});"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    profiles:
      - core

  exporter:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
      target: exporter
    image: moduprompt/exporter:local
    environment:
      <<: *app-env
      PORT: ${EXPORTER_PORT:-8081}
    depends_on:
      app:
        condition: service_started
      redis:
        condition: service_started
    read_only: true
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    volumes:
      - type: tmpfs
        target: /tmp
    profiles:
      - exports

  postgres:
    image: docker.io/postgres:16.4-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-moduprompt}
      POSTGRES_USER: ${POSTGRES_USER:-moduprompt}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-moduprompt}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U "${POSTGRES_USER:-moduprompt}" -d "${POSTGRES_DB:-moduprompt}"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - core
      - collab

  minio:
    image: docker.io/minio/minio:RELEASE.2024-09-22T00-00-00Z
    command:
      - server
      - /data
      - --console-address
      - :9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    restart: unless-stopped
    profiles:
      - exports

  redis:
    image: docker.io/redis:7.4-alpine
    command:
      - redis-server
      - --save
      - ''
      - --appendonly
      - 'no'
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles:
      - exports
      - collab

volumes:
  app-cache:
  postgres-data:
  minio-data:
  redis-data:
