name: CI

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
      - 'feat/**'
      - 'fix/**'
  pull_request:
    branches:
      - '*'
  workflow_dispatch: {}

permissions:
  contents: read
  packages: read
  security-events: write

env:
  NODE_VERSION: '20.17.0'
  PNPM_VERSION: '9.7.0'
  CACHE_VERSION: v1

jobs:
  quality:
    name: Install, Typecheck, Test, Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Typecheck
        run: pnpm typecheck

      - name: Run unit and integration tests
        run: pnpm test

      - name: Build packages
        run: pnpm build

  container-security:
    name: Build Containers & Scan
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies (no scripts)
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Verify Docker build workflow
        env:
          PNPM_LOG_LEVEL: info
        run: |
          set -euxo pipefail
          echo "Running pnpm docker:verify to validate Docker build pipeline"
          pnpm docker:verify
          echo "pnpm deploy command: pnpm --filter @moduprompt/api --prod deploy /srv/deploy"

      - name: Build application image
        run: docker build -f deploy/docker/Dockerfile -t moduprompt/app:${{ github.sha }} .

      - name: Build export worker image
        run: docker build -f deploy/docker/Dockerfile --target exporter -t moduprompt/exporter:${{ github.sha }} .

      - name: Run Trivy image scan (app)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: moduprompt/app:${{ github.sha }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Run Trivy image scan (exporter)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: moduprompt/exporter:${{ github.sha }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Upload Trivy SARIF (app)
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: moduprompt/app:${{ github.sha }}
          format: sarif
          output: trivy-app.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload Trivy SARIF (exporter)
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: moduprompt/exporter:${{ github.sha }}
          format: sarif
          output: trivy-exporter.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Publish SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            trivy-app.sarif
            trivy-exporter.sarif
