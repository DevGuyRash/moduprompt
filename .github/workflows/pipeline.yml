
name: CI

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
      - 'feat/**'
      - 'fix/**'
  pull_request:
    branches:
      - '*'
  workflow_dispatch: {}

permissions:
  contents: read
  packages: read
  security-events: write

env:
  NODE_VERSION: '20.17.0'
  PNPM_VERSION: '9.7.0'
  CACHE_VERSION: v1

jobs:
  quality:
    name: Install, Typecheck, Test, Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: moduprompt
          POSTGRES_PASSWORD: moduprompt
          POSTGRES_DB: moduprompt_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U moduprompt"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Typecheck
        run: pnpm typecheck

      - name: Run unit and integration tests
        run: pnpm test

      - name: Build packages
        run: pnpm build

      - name: Run Prisma migrations against Postgres
        env:
          DATABASE_URL: postgresql://moduprompt:moduprompt@localhost:5432/moduprompt_ci
        run: pnpm --filter @moduprompt/api prisma:migrate

      - name: Run Playwright journeys and accessibility suites
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0
        run: pnpm test:e2e --project=journeys --project=accessibility

  container-security:
    name: Build Containers & Scan
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies (no scripts)
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Verify Docker build workflow
        env:
          PNPM_LOG_LEVEL: info
        run: |
          set -euxo pipefail
          echo "Running pnpm docker:verify to validate Docker build pipeline"
          pnpm docker:verify
          echo "pnpm deploy command: pnpm --filter @moduprompt/api --prod deploy /srv/deploy"

      - name: Build application image
        run: docker build -f deploy/docker/Dockerfile -t moduprompt/app:${{ github.sha }} .

      - name: Build export worker image
        run: docker build -f deploy/docker/Dockerfile --target exporter -t moduprompt/exporter:${{ github.sha }} .

      - name: Launch application container
        run: |
          set -euxo pipefail
          docker run -d --name moduprompt-smoke \
            -e DATABASE_URL="file:/srv/moduprompt/data/smoke.db" \
            -e NODE_ENV=production \
            -e EXPORT_STORAGE_DRIVER=local \
            -e EXPORT_LOCAL_STORAGE_PATH=/srv/moduprompt/exports \
            -p 8080:8080 \
            moduprompt/app:${{ github.sha }}
          for i in {1..10}; do
            if curl -fsS http://127.0.0.1:8080/healthz > /dev/null; then
              exit 0
            fi
            sleep 5
          done
          echo "Application container failed to become healthy" >&2
          docker logs moduprompt-smoke
          exit 1

      - name: Run Docker smoke tests
        env:
          DOCKER_SMOKE_BASE_URL: http://127.0.0.1:8080
          PLAYWRIGHT_BROWSERS_PATH: 0
        run: pnpm test:e2e --project=docker-smoke

      - name: Gather container logs
        if: always()
        run: docker logs moduprompt-smoke || true

      - name: Stop application container
        if: always()
        run: docker rm -f moduprompt-smoke || true

      - name: Generate SBOM (app image)
        uses: anchore/syft-action@v0
        with:
          image: moduprompt/app:${{ github.sha }}
          output: spdx-json=sbom-app.spdx.json

      - name: Generate SBOM (exporter image)
        uses: anchore/syft-action@v0
        with:
          image: moduprompt/exporter:${{ github.sha }}
          output: spdx-json=sbom-exporter.spdx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-images
          path: |
            sbom-app.spdx.json
            sbom-exporter.spdx.json

      - name: Run Trivy image scan (app)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: moduprompt/app:${{ github.sha }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Run Trivy image scan (exporter)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: moduprompt/exporter:${{ github.sha }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Upload Trivy SARIF (app)
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: moduprompt/app:${{ github.sha }}
          format: sarif
          output: trivy-app.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload Trivy SARIF (exporter)
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: moduprompt/exporter:${{ github.sha }}
          format: sarif
          output: trivy-exporter.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Publish SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            trivy-app.sarif
            trivy-exporter.sarif
