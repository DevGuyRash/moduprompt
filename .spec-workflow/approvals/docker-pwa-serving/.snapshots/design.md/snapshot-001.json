{
  "id": "snapshot_1758829948072_1d0hsyfof",
  "approvalId": "approval_1758829948053_ru8dn8xcx",
  "approvalTitle": "docker-pwa-serving design v1.0.0",
  "version": 1,
  "timestamp": "2025-09-25T19:52:28.072Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\nDeliver the ModuPrompt PWA alongside the existing Fastify API when the Docker Compose `core` profile is launched. The runtime container already includes `apps/web/dist`; this design wires Fastify to serve static assets with a single-page application (SPA) fallback while preserving current API behaviour, health probes, and docker-build-hardening guarantees.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- Reuses the `Fastify` runtime mandated in technical steering by registering the approved `@fastify/static` plugin instead of introducing a new web server.\n- Keeps deterministic build pipeline: `pnpm build` already generates `apps/web/dist`; deployment stage will expose the existing bundle without altering compiler assumptions.\n- Leverages existing logging, health checks, and security posture (CSP, sanitized rendering) defined in steering; static plugin will inherit Fastify's header controls.\n\n### Project Structure (structure.md)\n- Implementation isolated within `apps/api/src` (new `plugins/staticAssets.ts` plus bootstrap wiring) mirroring existing plugin structure for Prisma, security, exports.\n- Docker changes limited to `deploy/docker/Dockerfile` and, if needed, `docker-compose.yml` (only to ensure volume/read-only settings accommodate static assets) per structure guidance.\n- Tests added under `tests/e2e` or `tests/docker` respecting repo testing layout, plus optional unit coverage under `apps/api/src/modules` to maintain structure separation.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **Fastify plugin pattern**: follow existing `plugins/exportPipeline.ts` structure for encapsulated registration and configuration.\n- **Environment loader (`apps/api/src/config/env.ts`)**: optionally extend to surface `PUBLIC_ASSETS_PATH` defaulting to `../web/dist` within the runtime image.\n\n### Integration Points\n- **Fastify app bootstrap (`buildApp`)**: register static plugin before route declarations to ensure asset serving precedes API route matching.\n- **Docker runtime image**: ensure `apps/web/dist` persists at predictable path (`/srv/moduprompt/apps/web/dist`) already copied during build stage; no new storage integration required.\n\n## Architecture\n\nThe API process will mount a static file handler at `/` serving files from the embedded `apps/web/dist` directory. Requests falling outside `/api/*` will be evaluated for static assets first; unmatched paths will respond with `index.html` to support client-side routing. API routes retain existing JSON responses and error handling.\n\n### Modular Design Principles\n- Introduce `staticAssetsPlugin` (single responsibility: configure static serving and SPA fallback).\n- Keep plugin configuration declarative via options object to avoid coupling with other modules.\n- Preserve layered architecture: plugin only touches Fastify reply/rendering; no business logic or persistence changes required.\n\n```mermaid\ngraph TD\n    A[buildApp] --> B[staticAssetsPlugin]\n    B --> C[Fastify Static Handler]\n    A --> D[API Route Plugins]\n    C -->|Serve bundles| E[Browser Client]\n    D -->|/api/*| F[Existing Services]\n```\n\n## Components and Interfaces\n\n### Component 1 — `staticAssetsPlugin`\n- **Purpose:** Register `@fastify/static` for `/assets/*`, set SPA fallback for non-API GETs, and configure cache headers.\n- **Interfaces:** Fastify plugin `(fastify, opts)` returning void; exports typed with `FastifyPluginAsync`.\n- **Dependencies:** `@fastify/static`, Node `path` utilities, `fileURLToPath` for ESM path resolution.\n- **Reuses:** Aligns with existing plugin pattern; reads env config via `env.STATIC_ROOT` (new optional field referencing build path).\n\n### Component 2 — Docker runtime adjustments\n- **Purpose:** Guarantee `apps/web/dist` available at runtime and accessible read-only.\n- **Interfaces:** Dockerfile COPY operations already present; may add `ENV STATIC_ROOT=\"/srv/moduprompt/apps/web/dist\"` consumed by env loader.\n- **Dependencies:** Existing build artifacts; no new packages.\n- **Reuses:** Relies on current multi-stage build copying `apps/web/dist` in deploy stage.\n\n## Data Models\n\nNo new persistent data models. Extend env schema (TypeScript `zod` definitions) with:\n```\nSTATIC_ROOT: string // default /srv/moduprompt/apps/web/dist\n```\nUsed only for runtime configuration.\n\n## Error Handling\n\n### Error Scenarios\n1. **Static directory missing**\n   - **Handling:** Plugin registers Fastify `onReady` hook validating directory existence; log permanent error and fail startup with exit code 1.\n   - **User Impact:** Container exits; Docker Compose restart policy surfaces error, preventing serving stale or missing assets.\n\n2. **Request for unsupported method on static path**\n   - **Handling:** Fastify static plugin returns 405; ensure fallback only triggers on GET/HEAD to avoid masking API misuse.\n   - **User Impact:** API clients receive standard error; SPA fallback unaffected.\n\n## Testing Strategy\n\n### Unit Testing\n- Add Vitest coverage for SPA fallback handler ensuring `/foo` returns `index.html` while `/api/bogus` returns JSON 404.\n\n### Integration Testing\n- Update docker verification script to perform HTTP GET against running container (dev server) verifying status 200 and key headers (content-type `text/html`, cache-control for static assets).\n\n### End-to-End Testing\n- Extend Playwright smoke test (existing harness) to point at docker runtime, assert UI loads and initial route renders without console errors; guard behind optional flag to keep deterministic runs.\n",
  "fileStats": {
    "size": 5548,
    "lines": 89,
    "lastModified": "2025-09-25T19:52:24.305Z"
  },
  "comments": []
}