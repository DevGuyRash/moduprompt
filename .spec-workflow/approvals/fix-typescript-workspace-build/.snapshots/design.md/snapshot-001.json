{
  "id": "snapshot_1758708288269_ftjm8bsbu",
  "approvalId": "approval_1758708288265_nymgmv7e4",
  "approvalTitle": "Design – fix-typescript-workspace-build v0.1.0",
  "version": 1,
  "timestamp": "2025-09-24T10:04:48.269Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design – fix-typescript-workspace-build\n\n## Overview\nTypeScript compilation inside the Docker build fails because workspace packages cannot resolve the\n`@moduprompt/types` module when `pnpm build` runs in a freshly cloned environment. The failure\ncascade also exposes missing type definitions for `sanitize-html`, blocking the compiler package.\nThis design aligns ModuPrompt’s TypeScript configuration with the steering guidance and introduces\ntyping coverage plus contributor documentation so that deterministic builds succeed locally and\nwithin Docker Compose.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- **Offline-first build determinism (§Technology Stack, §Development Practices):** centralising\n  module resolution in `tsconfig.base.json` preserves the shared TypeScript domain layer as the\n  source of truth for both client and backend packages.\n- **Security & supply chain (§Security & Compliance):** vetting the new `@types/sanitize-html`\n  dependency satisfies the requirement for typed, sandboxed Markdown sanitisation.\n\n### Project Structure (structure.md)\n- **Shared libraries (§Repository Layout – `packages/types`):** consumes types via workspace paths\n  while keeping compiled output in the shared package, avoiding duplicate schema definitions.\n- **Code organisation principles:** updates live in base config and package manifests, respecting the\n  single-responsibility conventions for configuration vs. package-level logic.\n\n### Product Steering (product.md)\n- **Deterministic Delivery & Governed Snippets:** restoring predictable builds ensures the snippet\n  governance and export pipelines remain deployable through Docker, upholding the platform promise\n  of deterministic exports with provenance.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **`tsconfig.base.json`**: centralised compiler options ensure consistent module resolution across\n  apps and packages.\n- **pnpm workspace tooling**: dependency graph already encodes `@moduprompt/types` as a shared\n  package.\n- **Existing README Quick Start**: extends current Docker guidance instead of creating a new entry\n  point.\n\n### Integration Points\n- **Docker build stage (`deploy/docker/Dockerfile`)**: no structural changes, but the build step\n  benefits from improved TypeScript configuration.\n- **Compiler package (`packages/compiler`)**: adds typings dependency while preserving ESM output.\n\n## Architecture\n\n- **Module resolution adjustments**: adopt TypeScript’s `moduleResolution: \"NodeNext\"` for better\n  compatibility with `exports` maps and add `paths` aliases from the workspace root to\n  `packages/types/src`. This satisfies <coding-foundations><principles/></coding-foundations> by\n  avoiding ad-hoc per-package patches and keeps deterministic builds per\n  <coding-foundations><performance-and-efficiency/></coding-foundations>.\n- **Typing hardening**: add `@types/sanitize-html` as a `devDependency` in `packages/compiler` so the\n  server-side export module builds without implicit `any` surfaces, meeting\n  <coding-foundations><security/></coding-foundations> requirements.\n- **Documentation update**: add a troubleshooting callout in the Docker quick start so contributors\n  can recognise and remediate legacy caches, satisfying <coding-foundations><quality-gates/>.\n\n```mermaid\ngraph TD\n    subgraph Config\n        A[tsconfig.base.json]\n        B[paths alias for @moduprompt/types]\n    end\n    subgraph Packages\n        C[@moduprompt/types]\n        D[@moduprompt/snippet-store]\n        E[@moduprompt/compiler]\n    end\n    subgraph Tooling\n        F[pnpm build]\n        G[docker compose build]\n    end\n    A --> B\n    B --> D\n    B --> E\n    C -->|exports & dist| D\n    C -->|exports & dist| E\n    F --> D\n    F --> E\n    F --> G\n```\n\n## Components and Interfaces\n\n### Component 1 – TypeScript Workspace Configuration\n- **Purpose:** guarantee consistent module resolution and dependency typing across packages when\n  running `pnpm build` or `pnpm typecheck`.\n- **Interfaces:** `tsconfig.base.json` consumed by every package `tsconfig.json`; new `paths` entries\n  (`@moduprompt/types`, `@moduprompt/types/*`).\n- **Dependencies:** TypeScript compiler, pnpm workspace linking.\n- **Reuses:** existing strict-mode configuration, shared target/output options.\n\n### Component 2 – Compiler typings reinforcement\n- **Purpose:** provide explicit typings for `sanitize-html` within `packages/compiler`.\n- **Interfaces:** `package.json` devDependencies, TypeScript typechecker.\n- **Dependencies:** DefinitelyTyped `@types/sanitize-html`, current `sanitize-html@2.17.0` runtime.\n- **Reuses:** existing `build` and `typecheck` scripts (no script changes required).\n\n### Component 3 – Contributor documentation update\n- **Purpose:** communicate the resolved behaviour and steps for clearing cached Docker layers if the\n  prior error reappears.\n- **Interfaces:** `README.md` Quick Start section.\n- **Dependencies:** none beyond Markdown rendering.\n- **Reuses:** existing Quick Start structure and troubleshooting tone.\n\n## Data Models\nNo schema or domain model changes; all updates operate at tooling/configuration level.\n\n## Error Handling\n\n### Error Scenario 1 – Workspace alias missing\n- **Handling:** TypeScript now resolves `@moduprompt/types` via base config `paths`, preventing the\n  TS2307 error before it surfaces in Docker builds.\n- **User Impact:** pnpm build exits successfully; Docker layers continue building.\n\n### Error Scenario 2 – Legacy Docker cache\n- **Handling:** README instructs users to rebuild with `--no-cache` if the legacy layer still emits the\n  error; deterministic builds remain reproducible per <determinism-and-reproducibility/>.\n- **User Impact:** contributors have clear remediation guidance without inspecting Docker internals.\n\n## Testing Strategy\n\n### Unit / Type Tests\n- Run `pnpm typecheck` to ensure all workspace packages resolve the shared types and that implicit\n  `any` warnings are eliminated.\n\n### Integration Tests\n- Execute `pnpm build` locally (and optionally within CI) to confirm topological build order works with\n  the alias configuration.\n\n### End-to-End / Deployment Tests\n- Rebuild Docker via `docker compose --profile core --env-file .env.local build --no-cache` to validate\n  that the build stage succeeds inside the container image, aligning with\n  <performance-protocol/><baseline/>.\n\n",
  "fileStats": {
    "size": 6386,
    "lines": 137,
    "lastModified": "2025-09-24T10:04:42.461Z"
  },
  "comments": []
}