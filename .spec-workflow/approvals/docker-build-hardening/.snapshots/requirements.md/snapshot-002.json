{
  "id": "snapshot_1758791342814_lrtfoagrp",
  "approvalId": "approval_1758791041823_q1uuiwwpp",
  "approvalTitle": "Approve requirements for docker-build-hardening",
  "version": 2,
  "timestamp": "2025-09-25T09:09:02.814Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# Requirements Document\n\n## Introduction\nThe Docker build for ModuPrompt currently fails during the production-pruning stage because the Dockerfile invokes `pnpm prune --prod --filter ./...`, which is unsupported for pnpm workspaces on pnpm 9.7.0. This specification will ensure container builds complete reliably and that automated safeguards are in place to prevent regressions, supporting the platform's Docker-first distribution promise.\n\n## Alignment with Product Vision\n- Reinforces the Product Steering commitment to \"Local-First Reliability\" and \"Deterministic Delivery\" by making Docker images reproducible and audit-ready.\n- Upholds the Technical Steering directive for Docker-first delivery and pnpm-based workspaces by adopting supported tooling paths for production builds.\n- Strengthens Structure Steering expectations that CI includes Docker build verification and that deployment assets under `deploy/docker` remain standards-compliant.\n\n## Requirements\n\n### Requirement 1 – Workspace-safe production install for Docker builds\n\n**User Story:** As a DevOps engineer, I want the Docker build stage to use a pnpm-supported workflow for workspace production installs so that container images assemble reliably without manual intervention.\n\n#### Acceptance Criteria\n1. WHEN the Docker image build runs with `docker build -f deploy/docker/Dockerfile` THEN the dependency installation stage SHALL succeed without invoking unsupported pnpm flags (e.g., `--recursive` on `pnpm prune`).\n2. IF the build executes inside CI using the existing GitHub Actions workflow THEN it SHALL complete using the new workflow without reintroducing devDependencies into the runtime image.\n3. WHEN running `docker compose --profile core --env-file deploy/docker/.env.local up --build --wait` locally THEN the process SHALL finish without pnpm errors and produce an image functionally equivalent to prior expectations.\n\n### Requirement 2 – Automated guardrails for container build regressions\n\n**User Story:** As an automation engineer, I want CI and local validation commands that fail fast when Docker build steps regress so that image breakages are caught before release.\n\n#### Acceptance Criteria\n1. WHEN CI executes the container security pipeline THEN it SHALL run the updated Docker build command and fail if the build encounters pnpm workspace incompatibilities or missing artifacts.\n2. IF engineers run a documented validation script (e.g., `pnpm docker:verify`) THEN it SHALL execute the same build command(s) used in CI and surface failures with actionable messaging.\n3. WHEN a developer introduces changes that modify Docker build steps THEN automated tests SHALL validate that production dependencies remain pruned and no dev-only packages are present in the runtime image (via smoke test or size/assertion check).\n\n### Requirement 3 – Visibility and documentation for build reliability\n\n**User Story:** As a release manager, I want clear documentation of the supported pnpm deployment path and evidence of coverage so that future contributors avoid reverting to broken patterns.\n\n#### Acceptance Criteria\n1. WHEN the specification is implemented THEN repository documentation under `deploy/docker` or `docs/ops` SHALL explain the validated pnpm workflow and local verification steps.\n2. IF new contributors follow the documented steps THEN they SHALL be able to reproduce a successful build using the same commands as CI without additional environment tweaks.\n3. WHEN reviewing CI artifacts THEN engineers SHALL find logs that explicitly note the pnpm command used for the production dependency stage to aid troubleshooting and audits.\n\n## Non-Functional Requirements\n\n### Code Architecture and Modularity\n- **Single Responsibility Principle**: Each script or helper introduced MUST focus on either dependency installation, verification, or documentation to maintain clarity.\n- **Modular Design**: CI workflow updates SHALL reference shared reusable actions or pnpm scripts instead of duplicating logic across jobs.\n- **Dependency Management**: Prefer pnpm-native solutions (`pnpm deploy`, filtered installs) to avoid custom tooling that would add maintenance overhead.\n- **Clear Interfaces**: Provide well-defined CLI entry points (e.g., `pnpm docker:verify`) with documented inputs/outputs for local and CI use.\n\n### Performance\n- Production builds SHALL not exceed the current baseline stages by more than 10% wall-clock time under comparable hardware; record before/after metrics when implementing.\n\n### Security\n- Enforce least-privilege in Docker images by ensuring devDependencies are excluded and supply-chain scanning (Trivy) remains functional after workflow changes.\n\n### Reliability\n- CI jobs MUST fail deterministically on build regressions; scripts SHALL exit with non-zero status on errors and provide actionable logs.\n\n### Usability\n- Developer documentation SHALL provide copy-pasteable commands and prerequisites so that engineers can validate builds without prior Docker specialization.\n",
  "fileStats": {
    "size": 5014,
    "lines": 59,
    "lastModified": "2025-09-25T09:03:54.094Z"
  },
  "comments": []
}