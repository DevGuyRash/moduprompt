{
  "id": "snapshot_1758792124004_0dw4ppcfj",
  "approvalId": "approval_1758792123992_bufuxgua6",
  "approvalTitle": "Approve design for docker-build-hardening",
  "version": 1,
  "timestamp": "2025-09-25T09:22:04.004Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\nThis design implements the approved requirements for the docker-build-hardening spec:\n- Replace the unsupported `pnpm prune --prod --filter ./...` command in `deploy/docker/Dockerfile` with a pnpm-supported workflow that produces a production-only dependency tree for the runtime image.\n- Introduce automated guardrails (CI and local verification script) that fail fast on container build regressions and confirm devDependencies do not leak into the runtime image.\n- Document the validated workflow in the repository docs and provide a newcomer-friendly README overhaul aligned with open-source adoption.\n\nThe approach uses `pnpm deploy` to generate a pruned artifact for the runtime stage, adds a reusable `pnpm docker:verify` script, enhances CI to use that script, and rewrites the README to give a GitHub-ready quickstart path that mirrors the verified workflow.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- Respects the Docker-first topology by keeping `deploy/docker/Dockerfile` as the source of truth and ensuring that CI builds the same artifact (per Technical Steering “Deployment Topology” and “Development Practices”).\n- Adheres to pnpm workspace conventions, using native commands instead of ad-hoc shell scripts, satisfying the directive to rely on established tooling.\n- Maintains security and supply-chain scanning via Trivy, meeting the Technical Steering requirements for reliability and compliance.\n\n### Project Structure (structure.md)\n- Modifies only sanctioned deployment assets under `deploy/docker/` and CI workflows in `.github/workflows/`.\n- Adds reusable scripts to `package.json` (workspace root) in line with structured tooling guidance.\n- README rewrite follows the Structure Steering repository map by linking to docs already organized under `docs/` and `deploy/`.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **`deploy/docker/Dockerfile`**: reuse multi-stage structure; replace the pruning stage with a deploy stage while preserving build outputs.\n- **`.github/workflows/pipeline.yml`**: reuse existing `container-security` job, augment steps to call the new verification script and capture timing.\n- **`docs/ops/env-vars.md`, `docs/product/quickstart.md`**: link from README instead of duplicating content.\n\n### Integration Points\n- **pnpm workspace tooling**: configure `pnpm deploy` (requires `inject-workspace-packages=true` in `.npmrc` or pnpm config) to create a portable package for the API runtime.\n- **Docker Compose**: README instructions will reference `docker compose --profile core ...` consistent with `deploy/docker/docker-compose.yml`.\n\n## Architecture\n\nWe re-stage the Docker build to use a deploy output and add verification loops:\n\n```mermaid\ngraph LR\n    A[Workspace Source] -->|install+build| B(Build Stage)\n    B -->|pnpm --filter @moduprompt/api --prod deploy /srv/pruned| C[Pruned Artifact]\n    C -->|COPY| D(Runtime Stage)\n    D -->|Entry| E[API Runtime]\n    B -->|Outputs| F[CI Verification]\n    F -->|docker build| G[container-security job]\n    F -->|pnpm docker:verify| H[Local Dev]\n```\n\n### Modular Design Principles\n- **Single File Responsibility**: Dockerfile keeps build vs runtime vs exporter separation; new script logic confined to `package.json` scripts.\n- **Component Isolation**: README houses high-level onboarding, while detailed configuration remains in existing docs.\n- **Service Layer Separation**: No application runtime code changes; focus remains on build pipeline and documentation.\n\n## Components and Interfaces\n\n### Dockerfile (deploy/docker/Dockerfile)\n- **Purpose:** Produce runtime image with production dependencies only.\n- **Interfaces:** `ARG NODE_VERSION`, `ARG PNPM_VERSION`, build stages `base`, `build`, `runtime-base`, `exporter`.\n- **Dependencies:** pnpm CLI, workspace packages, `pnpm deploy` output directory.\n- **Reuses:** Existing COPY patterns for dist/prisma assets; new stage `deploy` will reuse build outputs.\n\n### CI Workflow (`.github/workflows/pipeline.yml`)\n- **Purpose:** Build, scan, and verify Docker images and publish security reports.\n- **Interfaces:** GitHub Actions jobs `quality`, `container-security`.\n- **Dependencies:** pnpm scripts, Docker CLI, Trivy.\n- **Reuses:** Adds call to `pnpm docker:verify` prior to `docker build` so local/CI use the same command.\n\n### Package Scripts (`package.json`)\n- **Purpose:** Provide developer-friendly entry points for Docker verification and README examples.\n- **Interfaces:** `pnpm docker:verify`, `pnpm docker:build`, `pnpm docker:compose:core` (new/renamed scripts as needed).\n- **Dependencies:** Docker CLI, Compose.\n- **Reuses:** Wraps existing commands used in README and CI.\n\n### README.md\n- **Purpose:** Onboard open-source contributors with consistent instructions.\n- **Interfaces:** Markdown sections (Overview, Features, Quickstart, Verification, Contributing, Community, License).\n- **Dependencies:** Links to docs, spec workflow explanation, new scripts.\n\n## Data Models\nNo application data models change.\n\n## Error Handling\n\n### Error Scenarios\n1. **pnpm deploy misconfiguration**\n   - **Handling:** Fail build with actionable message ensuring `pnpm config set inject-workspace-packages true` is applied in Docker build stage before running deploy.\n   - **User Impact:** Build stops; README troubleshooting section and CI logs explain fix.\n\n2. **Docker verification failures on local machines**\n   - **Handling:** `pnpm docker:verify` exits non-zero with context (e.g., missing Docker daemon or command).\n   - **User Impact:** Developer re-runs after resolving prerequisites.\n\n## Testing Strategy\n\n### Unit Testing\n- Not required; focus on integration-level validation of build pipeline.\n\n### Integration Testing\n- Extend CI `container-security` job to run `pnpm docker:verify` (which executes `docker build` and optionally inspect outputs).\n- Add script to examine runtime image (e.g., `docker run --rm moduprompt/app:verify node -e ...`) ensuring no devDependencies detected.\n\n### End-to-End Testing\n- README walkthrough acts as manual E2E; optionally add Playwright smoke referencing new instructions (documented but optional for this spec).\n\n",
  "fileStats": {
    "size": 6195,
    "lines": 105,
    "lastModified": "2025-09-25T09:22:00.823Z"
  },
  "comments": []
}